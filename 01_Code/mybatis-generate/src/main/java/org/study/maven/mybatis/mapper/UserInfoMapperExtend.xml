<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.study.maven.mybatis.dao.UserInfoMapper">
	<resultMap id="BaseResultMap" type="org.study.maven.mybatis.bean.UserInfo">
		<id column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="user_name" jdbcType="VARCHAR" property="userName" />
		<result column="sex" jdbcType="CHAR" property="sex" />
	</resultMap>

	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		UserInfo
		where user_id = #{userId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" keyProperty="userId"
		parameterType="org.study.maven.mybatis.bean.UserInfo"
		useGeneratedKeys="true">
		insert into UserInfo (user_name, sex)
		values
		(#{userName,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR})
	</insert>
	<update id="updateByPrimaryKey" parameterType="org.study.maven.mybatis.bean.UserInfo">
		update UserInfo
		set user_name = #{userName,jdbcType=VARCHAR},
		sex =
		#{sex,jdbcType=CHAR}
		where user_id = #{userId,jdbcType=INTEGER}
	</update>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select user_id, user_name, sex
		from UserInfo
		where user_id =
		#{userId,jdbcType=INTEGER}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select user_id, user_name, sex
		from UserInfo
	</select>
	<resultMap id="BaseResultMap" type="org.study.maven.mybatis.bean.UserInfo">
		<id column="user_id" jdbcType="INTEGER" property="userId" />
		<result column="user_name" jdbcType="VARCHAR" property="userName" />
		<result column="sex" jdbcType="CHAR" property="sex" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		UserInfo
		where user_id = #{userId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" keyProperty="userId"
		parameterType="org.study.maven.mybatis.bean.UserInfo"
		useGeneratedKeys="true">
		insert into UserInfo (user_name, sex)
		values
		(#{userName,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR})
	</insert>
	<update id="updateByPrimaryKey" parameterType="org.study.maven.mybatis.bean.UserInfo">
		update UserInfo
		set user_name = #{userName,jdbcType=VARCHAR},
		sex =
		#{sex,jdbcType=CHAR}
		where user_id = #{userId,jdbcType=INTEGER}
	</update>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select user_id, user_name, sex
		from UserInfo
		where user_id =
		#{userId,jdbcType=INTEGER}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select user_id, user_name, sex
		from UserInfo
	</select>
	<select id="selectByCriterion" parameterType="org.study.maven.mybatis.SelectCriterion"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>

		<choose>
			<when test="selectiveColumnlist.size() != 0">
				<foreach collection="selectiveColumnlist" item="column"
					separator=",">
					${column}
				</foreach>
			</when>
			<otherwise>
				*
			</otherwise>
		</choose>
		from UserInfo
		<where>
			<foreach collection="orWhereClausesList" item="whereclauses"
				separator="or">
				<trim prefix="(" prefixOverrides="and" suffix=")">
					<foreach collection="whereclauses.andWhereClauselist" item="wherclause">
						and ${wherclause.fieldName} ${wherclause.condition}
						#{wherclause.fieldValue}
					</foreach>
				</trim>
			</foreach>
		</where>
		<if test="orderByClause != null and orderByClause != ''">
			order by ${orderByClause}
		</if>
		<if test="length != 0">
			limit ${begin}, ${length}
		</if>
	</select>

</mapper>